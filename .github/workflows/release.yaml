name: Release

on:
  push:
    branches:
      - main

jobs:
  macos:
    strategy:
      matrix:
        os-version: ["13", "14"]
        include:
          - os-version: "13"
            arch: x86_64
          - os-version: "14"
            arch: aarch64

    runs-on: macos-${{ matrix.os-version }}

    env:
      # Even though we run on 13, target compatibility
      MACOSX_DEPLOYMENT_TARGET: "11.0"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.14"
          cache: pip

      - uses: dtolnay/rust-toolchain@stable

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade uv
          uv --version
          uv sync

      - name: Execute PyInstaller
        run: |
          uv run build.py
          # Correct tar syntax: tar czf <archive> -C <dir> <path>
          tar czf dist/apic_studio_macos_${{ matrix.arch }}.tar.gz -C dist "Apic Studio.app" apic_connector_plugin

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: apic_studio_macos_${{ matrix.arch }}
          path: dist/apic_studio_macos_${{ matrix.arch }}.tar.gz

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x86_64] # GitHub hosted runners are x64 (MSVC)
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.14"
          cache: pip

      - name: Setup Rust (MSVC)
        uses: dtolnay/rust-toolchain@stable

      - name: Install Python dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade uv
          uv --version
          uv sync

      - name: Build apic studio utils
        shell: pwsh
        run: |
          uv run maturin build --release

      - name: Execute PyInstaller
        shell: pwsh
        run: |
          uv run build.py
          # Package Windows build as a zip; include app dir and plugin
          # Adjust names if your build output differs
          if (Test-Path "dist\Apic Studio") {
            Compress-Archive -Path @("dist\Apic Studio", "dist\apic_connector_plugin") -DestinationPath "dist\apic_studio_windows_x86_64.zip" -Force
          } elseif (Test-Path "dist\ApicStudio") {
            Compress-Archive -Path @("dist\ApicStudio", "dist\apic_connector_plugin") -DestinationPath "dist\apic_studio_windows_x86_64.zip" -Force
          } else {
            # Fallback: zip the whole dist folder (last resort)
            Compress-Archive -Path "dist\*" -DestinationPath "dist\apic_studio_windows_x86_64.zip" -Force
          }

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: apic_studio_windows_x86_64
          path: dist/apic_studio_windows_x86_64.zip

  publish:
    needs: [macos, windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Fetch artifacts
        uses: actions/download-artifact@v4

      - name: Publish release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          files: |
            apic_studio_macos_x86_64/*
            apic_studio_macos_aarch64/*
            apic_studio_windows_x86_64/*
